syntax = "proto3";
import "filters.proto";
import "sorts.proto";

package articles;

message Article {
  int32 id = 1;
  string title = 2;
  string abstract = 3;
  int32 user_id = 4;
  repeated Hub hubs = 5;
  repeated Tag tags = 6;
  int32 comments_count = 7;
  int32 rating = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}

message HubLogo {
  int32 id = 1;
  string key = 2;
  string url = 3;
}

message Hub {
  int32 id = 1;
  string name = 2;
  string description = 3;
  HubLogo logo = 4;
  int32 articles_count = 5;
  int32 tags_count = 6;
}

message Tag {
  int32 id = 1;
  string name = 2;
  string description = 3;
  Hub hub = 4;
  int32 articles_count = 5;
}

message ArticlesFilters {
  filters.IdFilter id = 1;
  filters.TextFilter title = 2;
  filters.IdFilter user = 3;
  filters.IdListFilter hubs = 4;
  filters.IdListFilter tags = 5;
  filters.NumericIntegerFilter comments = 6;
  filters.NumericIntegerFilter rating = 7;
  filters.DateTimeFilter created_at = 8;
}

message ArticlesSorts {
  sorts.SortOrder title = 1;
  sorts.SortOrder comments = 2;
  sorts.SortOrder rating = 3;
  sorts.SortOrder created_at = 4;
}

message HubsFilters {
  filters.IdFilter id = 1;
  filters.TextFilter name = 2;
  filters.IdListFilter tags_list = 3;
  filters.NumericIntegerFilter articles = 4;
  filters.NumericIntegerFilter tags = 5;
}

message HubsSorts {
  sorts.SortOrder name = 1;
  sorts.SortOrder articles = 2;
  sorts.SortOrder tags = 3;
}

message TagsFilters {
  filters.IdFilter id = 1;
  filters.TextFilter name = 2;
  filters.IdFilter hub = 3;
  filters.NumericIntegerFilter articles = 4;
}

message TagsSorts {
  sorts.SortOrder name = 1;
  sorts.SortOrder articles = 2;
}

message FindArticlesRequest {
  ArticlesFilters filters = 1;
  ArticlesSorts sorts = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message FindArticlesResponse {
  bool is_articles_found = 1;
  repeated Article articles = 2;
  int32 limit = 3;
  int32 total = 4;
}

message FindHubsRequest {
  HubsFilters filters = 1;
  HubsSorts sorts = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message FindHubsResponse {
  bool is_hubs_found = 1;
  repeated Hub hubs = 2;
  int32 limit = 3;
  int32 total = 4;
}

message FindTagsRequest {
  TagsFilters filters = 1;
  TagsSorts sorts = 2;
  int32 limit = 3;
  int32 offset = 4;
}

message FindTagsResponse {
  bool is_tags_found = 1;
  repeated Tag tags = 2;
  int32 limit = 3;
  int32 total = 4;
}

service ArticlesService {
  rpc findArticles(FindArticlesRequest) returns (FindArticlesResponse);
  rpc findHubs(FindHubsRequest) returns (FindHubsResponse);
  rpc findTags(FindTagsRequest) returns (FindTagsResponse);
}